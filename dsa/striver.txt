selection sorting : select minimum from the unsorted array  and swap it with the starting element from the sorted array . 

swap at index 0 and the index with minimum element from ( 0 to n-1).
swap at index 1 and the index with minimum element from ( 1 to n-1).
swap at index 2 and the index with minimum element from ( 2 to n-1).
swap at index 3 and the index with minimum element from ( 3 to n-1).
-
-
-
-
swap at index n-2 and the index with minimum element from ( n-2 to n-1).

 void selectionSort(int arr[], int n)
    {
      //code here
        for(int i =0 ; i<n-1 ; i++)
         {
               int  min = i;
               
              for (int j=i ; j<=n-1; j++ )
              {
                     if (arr[j] < arr[min])
                     {
                         min =  j;
                     }
              }
              
              swap(arr[i] , arr[min]);
         }
    }

time complexity is  o(n^2).

---------------------------------------------------------------
 
 bubble sorting : pushes maximum element  to the last by adjacent swappings .

 void bubbleSort(int arr[], int n)
    {
        for(int i=n-1 ; i>=1; i--){
          int didswap = 0;
        
            for(int j=0 ; j<i; j++)
            {
                 if(arr[j] > arr[j+1])
                 {
                   swap(arr[j],arr[j+1]);
                   didswap = 1;
                 }
            }
            if(didswap == 0)
            {
                 break;
            }

        }
              
}
time complexity in worst case is  o(n^2) and in best case  it is o(n).
----------------------------------------------------------------

insertion sort : takes an element and places it in correct position. 


    void insertionSort(int arr[], int n)
    {
        for( int i =0 ; i<=n-1; i++)
        {
            int j = i;
            while(j>0 &&  arr[j-1]> arr[j])
            {
                
                    int temp = arr[j-1] ;
                      arr[j-1] =arr[j];
                      arr[j] = temp;
                    j--;
                
            }
        }
    }

timecomplexity of  insertion sort is o(n^2).

-------------------------------------------------------------------

merge sort:  divide and merge. 

 void merge(int arr[], int l, int m, int r)
    {
       vector<int> temp;
       
       int left = l;
       int right = m+1;
       
       while(left<=m && right<=r)
       {
           if(arr[left]<= arr[right])
           {
               temp.push_back(arr[left]);
               left++;
           }
           else
           {
               temp.push_back(arr[right]);
               right++;
           }
       }
       
       while(left<=m)
       {
            temp.push_back(arr[left]);
            left++;
       }
       
       while(right<=r)
       {
           temp.push_back(arr[right]);
           right++;
       } 
         
       for(int i= l ; i<=r; i++)
       {
           arr[i] = temp[i-l];
       }
            
    }

    public:
    void mergeSort(int arr[], int l, int r)
    {
        if(l>=r)
        {
            return;
        }
        
        int m = (l+r)/2;
        
        mergeSort(arr , l , m);
        mergeSort(arr , m+1 , r);
        merge(arr , l , m , r);
        
    }


time complexity of merge sort is nlogbase2n in all cases best, worst & average & space complexity is o(n) . 

------------------------------------------------------------------
recursivebubblesort: 

 void func(int s , int l , int arr[])
    {
        if(s==l)
        {
            return;
        }
        
        if(arr[s]> arr[s+1])
        {
            swap(arr[s] , arr[s+1]);
        }
        
        func(s+1, l  ,arr);
    }
    
    void bubbleSort(int arr[], int n)
    {
        for(int i=n-1 ; i>=1; i--)
        {
            func(0, i , arr);
        }
    
}
-------------------------------------------------------------

recursiveinsertionsort: yeh code nhi chal rha hai.                                     ( doubt)

void insert(int jdx , int arr[])
    {
        if(jdx==0)
        {
            return;
        }
        
        else if(arr[jdx-1]<arr[jdx])
        {
            return ;
        }
        
        if(jdx>0 && arr[jdx-1]>arr[jdx])
        {
            int temp = arr[jdx-1] ;
            arr[jdx-1] =arr[jdx];
            arr[jdx] = temp;
            jdx--;
        }
        insert(jdx , arr);
    }
    
    void insertionSort(int arr[], int n)
    {
        if(n==1)
        {
            return ;
        }
        for( int i =0 ; i<=n-1; i++)
        {
            int j = i;
            insert(j , arr);
        }
    }
-----------------------------------------------------------------
quicksort: pick up the pivot element and place it in correct place in the sorted array. then smaller on the left and larger on the right. 

pivot element can be the :
          first element of the array.
          last element of the array.
          median element of the array.
          random element of the array.

code: 





